figureData <- as.data.frame(cbind(colData(nsclcSPE), spatialCoords(nsclcSPE)))
figureData <- cbind(figureData, A2M=as.numeric(nsclcSPE@assays@data$GeoMx["A2M",]))
tumor <- ggplot(figureData[figureData$AOI.name == "Tumor",], aes(x=x, y=y, color = A2M))+
geom_point(size = 6)+
scale_color_continuous(type = "viridis",
limits = c(min(figureData$A2M),
max(figureData$A2M)))+
theme(legend.position = "none", panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.line = element_blank())+
labs(title = "Tumor")
TME <- ggplot(figureData[figureData$AOI.name == "TME",], aes(x=x, y=y, color = A2M))+
geom_point(size = 6)+
scale_color_continuous(type = "viridis",
limits = c(min(figureData$A2M),
max(figureData$A2M))) +
theme(panel.grid = element_blank(),
panel.background = element_rect(fill = "white"), axis.title = element_blank(),
axis.text = element_blank(), axis.ticks = element_blank(), axis.line = element_blank())+
labs(title = "TME")
wrap_plots(tumor, TME)
nsclcSeurat <- as.Seurat(nsclc, normData = "exprs_norm", ident = "AOI.annotation",
coordinates = c("x", "y"))
nsclcSeurat
VlnPlot(nsclcSeurat, features = "nCount_GeoMx", pt.size = 0.1)
nsclcSeurat <- FindVariableFeatures(nsclcSeurat)
nsclcSeurat <- FindVariableFeatures(nsclcSeurat)
nsclcSeurat <- ScaleData(nsclcSeurat)
nsclcSeurat <- ScaleData(nsclcSeurat)
nsclcSeurat <- RunPCA(nsclcSeurat, assay = "GeoMx", verbose = FALSE)
nsclcSeurat <- RunPCA(nsclcSeurat, assay = "GeoMx", verbose = FALSE)
nsclcSeurat <- FindNeighbors(nsclcSeurat, reduction = "pca", dims = seq_len(30))
nsclcSeurat <- FindNeighbors(nsclcSeurat, reduction = "pca", dims = seq_len(30))
nsclcSeurat <- FindClusters(nsclcSeurat, verbose = FALSE)
nsclcSeurat <- FindClusters(nsclcSeurat, verbose = FALSE)
nsclcSeurat <- RunUMAP(nsclcSeurat, reduction = "pca", dims = seq_len(30))
nsclcSeurat <- FindVariableFeatures(nsclcSeurat)
nsclcSeurat <- ScaleData(nsclcSeurat)
nsclcSeurat <- RunPCA(nsclcSeurat, assay = "GeoMx", verbose = FALSE)
nsclcSeurat <- FindNeighbors(nsclcSeurat, reduction = "pca", dims = seq_len(30))
nsclcSeurat <- FindClusters(nsclcSeurat, verbose = FALSE)
nsclcSeurat <- RunUMAP(nsclcSeurat, reduction = "pca", dims = seq_len(30))
DimPlot(nsclcSeurat, reduction = "umap", label = TRUE, group.by = "AOI.name")
tumor <- suppressMessages(SpatialFeaturePlot(nsclcSeurat[,nsclcSeurat$AOI.name == "Tumor"],
features = "nCount_GeoMx", pt.size.factor = 12) +
labs(title = "Tumor") +
theme(legend.position = "none") +
scale_fill_continuous(type = "viridis",
limits = c(min(nsclcSeurat$nCount_GeoMx),
max(nsclcSeurat$nCount_GeoMx))))
TME <- suppressMessages(SpatialFeaturePlot(nsclcSeurat[,nsclcSeurat$AOI.name == "TME"],
features = "nCount_GeoMx", pt.size.factor = 12) +
labs(title = "TME") +
theme(legend.position = "right") +
scale_fill_continuous(type = "viridis",
limits = c(min(nsclcSeurat$nCount_GeoMx),
max(nsclcSeurat$nCount_GeoMx))))
wrap_plots(tumor, TME)
tumor <- suppressMessages(SpatialFeaturePlot(nsclcSeurat[,nsclcSeurat$AOI.name == "Tumor"],
features = "A2M", pt.size.factor = 12) +
labs(title = "Tumor") +
theme(legend.position = "none") +
scale_fill_continuous(type = "viridis",
limits = c(min(nsclcSeurat@assays$GeoMx$data["A2M",]),
max(nsclcSeurat@assays$GeoMx$data["A2M",]))))
TME <- suppressMessages(SpatialFeaturePlot(nsclcSeurat[,nsclcSeurat$AOI.name == "TME"],
features = "A2M", pt.size.factor = 12) +
labs(title = "TME") +
theme(legend.position = "right") +
scale_fill_continuous(type = "viridis",
limits = c(min(nsclcSeurat@assays$GeoMx$data["A2M",]),
max(nsclcSeurat@assays$GeoMx$data["A2M",]))))
wrap_plots(tumor, TME)
nsclcSPE <- as.SpatialExperiment(nsclc, normData = "exprs_norm",
coordinates = c("x", "y"))
nsclcSPE
data.frame(head(spatialCoords(nsclcSPE)))
figureData <- as.data.frame(cbind(colData(nsclcSPE), spatialCoords(nsclcSPE)))
figureData <- cbind(figureData, A2M=as.numeric(nsclcSPE@assays@data$GeoMx["A2M",]))
tumor <- ggplot(figureData[figureData$AOI.name == "Tumor",], aes(x=x, y=y, color = A2M))+
geom_point(size = 6)+
scale_color_continuous(type = "viridis",
limits = c(min(figureData$A2M),
max(figureData$A2M)))+
theme(legend.position = "none", panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.line = element_blank())+
labs(title = "Tumor")
TME <- ggplot(figureData[figureData$AOI.name == "TME",], aes(x=x, y=y, color = A2M))+
geom_point(size = 6)+
scale_color_continuous(type = "viridis",
limits = c(min(figureData$A2M),
max(figureData$A2M))) +
theme(panel.grid = element_blank(),
panel.background = element_rect(fill = "white"), axis.title = element_blank(),
axis.text = element_blank(), axis.ticks = element_blank(), axis.line = element_blank())+
labs(title = "TME")
wrap_plots(tumor, TME)
tumor <- ggplot(figureData[figureData$AOI.name == "Tumor",], aes(x=-x, y=-y, color = A2M))+
geom_point(size = 6)+
scale_color_continuous(type = "viridis",
limits = c(min(figureData$A2M),
max(figureData$A2M)))+
theme(legend.position = "none", panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.line = element_blank())+
labs(title = "Tumor")
TME <- ggplot(figureData[figureData$AOI.name == "TME",], aes(x=-x, y=-y, color = A2M))+
geom_point(size = 6)+
scale_color_continuous(type = "viridis",
limits = c(min(figureData$A2M),
max(figureData$A2M))) +
theme(panel.grid = element_blank(),
panel.background = element_rect(fill = "white"), axis.title = element_blank(),
axis.text = element_blank(), axis.ticks = element_blank(), axis.line = element_blank())+
labs(title = "TME")
wrap_plots(tumor, TME)
tumor <- ggplot(figureData[figureData$AOI.name == "Tumor",], aes(x=x, y=-y, color = A2M))+
geom_point(size = 6)+
scale_color_continuous(type = "viridis",
limits = c(min(figureData$A2M),
max(figureData$A2M)))+
theme(legend.position = "none", panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.line = element_blank())+
labs(title = "Tumor")
TME <- ggplot(figureData[figureData$AOI.name == "TME",], aes(x=x, y=-y, color = A2M))+
geom_point(size = 6)+
scale_color_continuous(type = "viridis",
limits = c(min(figureData$A2M),
max(figureData$A2M))) +
theme(panel.grid = element_blank(),
panel.background = element_rect(fill = "white"), axis.title = element_blank(),
axis.text = element_blank(), axis.ticks = element_blank(), axis.line = element_blank())+
labs(title = "TME")
wrap_plots(tumor, TME)
nsclcSPE <- as.SpatialExperiment(nsclc, normData = "exprs_norm",
coordinates = c("y", "x"))
nsclcSPE
nsclcSPE
data.frame(head(spatialCoords(nsclcSPE)))
figureData <- as.data.frame(cbind(colData(nsclcSPE), spatialCoords(nsclcSPE)))
figureData <- cbind(figureData, A2M=as.numeric(nsclcSPE@assays@data$GeoMx["A2M",]))
tumor <- ggplot(figureData[figureData$AOI.name == "Tumor",], aes(x=x, y=y, color = A2M))+
geom_point(size = 6)+
scale_color_continuous(type = "viridis",
limits = c(min(figureData$A2M),
max(figureData$A2M)))+
theme(legend.position = "none", panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.line = element_blank())+
labs(title = "Tumor")
TME <- ggplot(figureData[figureData$AOI.name == "TME",], aes(x=x, y=y, color = A2M))+
geom_point(size = 6)+
scale_color_continuous(type = "viridis",
limits = c(min(figureData$A2M),
max(figureData$A2M))) +
theme(panel.grid = element_blank(),
panel.background = element_rect(fill = "white"), axis.title = element_blank(),
axis.text = element_blank(), axis.ticks = element_blank(), axis.line = element_blank())+
labs(title = "TME")
wrap_plots(tumor, TME)
spatialCoords(nsclcSPE)
ggplot(figureData[figureData$AOI.name == "TME",], aes(x=y, y=x, color = A2M))+
geom_point(size = 6)+
scale_color_continuous(type = "viridis",
limits = c(min(figureData$A2M),
max(figureData$A2M))) +
theme(panel.grid = element_blank(),
panel.background = element_rect(fill = "white"), axis.title = element_blank(),
axis.text = element_blank(), axis.ticks = element_blank(), axis.line = element_blank())+
labs(title = "TME")
nsclcSPE <- as.SpatialExperiment(nsclc, normData = "exprs_norm",
coordinates = c("x", "y"))
nsclcSPE
nsclcSPE
data.frame(head(spatialCoords(nsclcSPE)))
head(nsclcSeurat@images$image@coordinates)
head(figureData)
head( spatialCoords(nsclcSPE))
head(nsclcSeurat@images$image@coordinates)
all.equal(spatialCoords(nsclcSPE), nsclcSeurat@images$image@coordinates)
all.equal(as.data.frame(spatialCoords(nsclcSPE)), as.data.frame(nsclcSeurat@images$image@coordinates))
figureData <- as.data.frame(cbind(colData(nsclcSPE), spatialCoords(nsclcSPE)))
head(figureData)
figureData <- cbind(figureData, A2M=as.numeric(nsclcSPE@assays@data$GeoMx["A2M",]))
ggplot(figureData[figureData$AOI.name == "Tumor",], aes(x=x, y=y, color = A2M))+
geom_point(size = 6)
ggplot(figureData[figureData$AOI.name == "Tumor",], aes(x=x, y=y, color = A2M))+
geom_point(size = 6)
ggplot(figureData[figureData$AOI.name == "Tumor",], aes(x=y, y=x, color = A2M))+
geom_point(size = 6)
ggplot(figureData[figureData$AOI.name == "Tumor",], aes(x=y, y=-x, color = A2M))+
geom_point(size = 6)
figureData <- as.data.frame(cbind(colData(nsclcSPE), spatialCoords(nsclcSPE)))
figureData <- cbind(figureData, A2M=as.numeric(nsclcSPE@assays@data$GeoMx["A2M",]))
tumor <- ggplot(figureData[figureData$AOI.name == "Tumor",], aes(x=y, y=-x, color = A2M))+
geom_point(size = 6)+
scale_color_continuous(type = "viridis",
limits = c(min(figureData$A2M),
max(figureData$A2M)))+
theme(legend.position = "none", panel.grid = element_blank(),
panel.background = element_rect(fill = "white"),
axis.title = element_blank(), axis.text = element_blank(),
axis.ticks = element_blank(), axis.line = element_blank())+
labs(title = "Tumor")
TME <- ggplot(figureData[figureData$AOI.name == "TME",], aes(x=y, y=-x, color = A2M))+
geom_point(size = 6)+
scale_color_continuous(type = "viridis",
limits = c(min(figureData$A2M),
max(figureData$A2M))) +
theme(panel.grid = element_blank(),
panel.background = element_rect(fill = "white"), axis.title = element_blank(),
axis.text = element_blank(), axis.ticks = element_blank(), axis.line = element_blank())+
labs(title = "TME")
wrap_plots(tumor, TME)
wrap_plots(tumor, TME)
library(GeomxTools)
library(testthat)
datadir <- system.file("extdata", "DSP_NGS_Example_Data",
package="GeomxTools")
PKCFiles <- unzip(zipfile = file.path(datadir,  "/pkcs.zip"))
pkcFile <- readPKCFile(PKCFiles)
lines <- suppressWarnings(c(readLines(file.path(PKCFiles[1])), readLines(file.path(PKCFiles[2]))))
# Spec 1: test that the column names of PKC files are in correct format:------
testthat::test_that("test that the column names of PKC files are in correct format", {
expect_true(all(colnames(pkcFile) == c("RTS_ID", "Target", "Module",
"CodeClass", "ProbeID", "GeneID", "SystematicName", "Negative")))
})
# Spec 2: test that the names of metadata of PKC files are in correct format:------
testthat::test_that("test that the column names of PKC files are in correct format", {
expect_true(all(names(metadata(pkcFile)) ==
c("PKCFileName", "PKCModule", "PKCFileVersion", "PKCFileDate",
"AnalyteType", "MinArea","MinNuclei")))
})
# req3: test that the number of probes is correct:------
testthat::test_that("test that the number of probes is correct", {
num_probes <- length(grep("\"ProbeID\":", lines))
expect_true(dim(pkcFile)[1] == num_probes)
})
# Load a simulated second PKC version for the six gene module
verTestPKCFile <- unzip(zipfile = file.path(datadir, "/version_example_pkc.zip"))
multiPKCFiles <- c(PKCFiles[grepl("Six", PKCFiles)], verTestPKCFile)
# req4: check for warning if default PKC provided when no multiple versions:---
testthat::test_that("warning if default PKC given when not needed", {
expect_warning(readPKCFile(PKCFiles,
default_pkc_vers="./Six-gene_test_v1_v1.1.pkc"))
})
# req5: check for error if default PKCs is not a valid pkc file:------
testthat::test_that("check for error if default file name wrong", {
expect_error(readPKCFile(multiPKCFiles, default_pkc_vers=c("fake pkc name")))
})
# req6: check for error if multiple default PKCs for a module:------
testthat::test_that("check for error if multiple defaults per module", {
expect_error(readPKCFile(multiPKCFiles, default_pkc_vers=c(
"./Six-gene_test_v1_v1.1.pkc", "./Six-gene_test_v1_v2.5.pkc")))
})
# req7: check for warning when resolving multiple PKC versions:------
testthat::test_that("check for warning when resolving multiple PKC versions", {
expect_warning(expect_warning(readPKCFile(multiPKCFiles),
"The following probes"), "The following PKC")
})
readPKCFile(multiPKCFiles)
multiPKCFiles
expect_warning(readPKCFile(multiPKCFiles)
)
file = multiPKCFiles
default_pkc_vers=NULL
pkc_json_list <- lapply(file, function(pkc_file) {rjson::fromJSON(file = pkc_file)})
pkc_names <- extract_pkc_names(file)
source("~/GeomxTools/R/readPKCFile.R")
pkc_names <- extract_pkc_names(file)
names(pkc_json_list) <- pkc_names
pkc_modules <- basename(unlist(lapply(pkc_names, sub, pattern="_[^_]+$", replacement="")))
names(pkc_modules) <- pkc_names
# Extract header
header <- list(PKCFileName = sapply(pkc_json_list, function(list) list[["Name"]]),
PKCModule = pkc_modules,
PKCFileVersion = sapply(pkc_json_list, function(list) list[["Version"]]),
PKCFileDate = sapply(pkc_json_list, function(list) list[["Date"]]),
AnalyteType = sapply(pkc_json_list, function(list) list[["AnalyteType"]]),
MinArea = sapply(pkc_json_list, function(list) list[["MinArea"]]),
MinNuclei = sapply(pkc_json_list, function(list) list[["MinNuclei"]])
)
# Check for multiple versions of pkc
multi_idx <- duplicated(header[["PKCModule"]])
multi_mods <- unique(header[["PKCModule"]][multi_idx])
if (length(multi_mods) < 1) {
if (!is.null(default_pkc_vers)) {
warning("Only one version found per PKC module. ",
"No PKCs need to be combined. ",
"Therefore, no default PKC versions will be used.")
}
} else {
use_pkc_names <- lapply(multi_mods, function(mod) {
mod_idx <- header[["PKCModule"]] == mod
max_vers <- as.numeric(as.character(max(as.numeric_version(
header[["PKCFileVersion"]][mod_idx]))))
max_name <- names(header[["PKCFileVersion"]][
header[["PKCFileVersion"]] == max_vers])
return(max_name)
})
names(use_pkc_names) <- multi_mods
if (!is.null(default_pkc_vers)) {
default_names <- extract_pkc_names(default_pkc_vers)
default_mods <- extract_pkc_modules(default_pkc_vers)
dup_defaults <- default_names[duplicated(default_mods) |
duplicated(default_mods, fromLast=TRUE)]
if (!all(default_names %in% names(header[["PKCFileName"]]))) {
removed_pkcs <-
default_pkc_vers[!default_names %in% names(header[["PKCFileName"]])]
stop("Could not match all default PKC versions with a PKC file name. ",
"Check default file names match exactly to a PKC file name.\n",
paste0("Unmatched default PKC versions: ", removed_pkcs))
} else if (length(dup_defaults) > 0) {
stop("There should only be one default PKC version per module. ",
"Ensure only one version per module in default PKCs list.\n",
"Multiple default PKC version conflicts: ",
paste(dup_defaults, collapse=", "))
} else {
use_pkc_names[default_mods] <- default_names
}
}
}
use_pkc_names <- lapply(multi_mods, function(mod) {
mod_idx <- header[["PKCModule"]] == mod
max_vers <- as.numeric(as.character(max(as.numeric_version(
header[["PKCFileVersion"]][mod_idx]))))
max_name <- names(header[["PKCFileVersion"]][
header[["PKCFileVersion"]] == max_vers])
return(max_name)
})
multi_mods
# Check for multiple versions of pkc
multi_idx <- duplicated(header[["PKCModule"]])
multi_mods <- unique(header[["PKCModule"]][multi_idx])
multi_mods
if (!is.null(default_pkc_vers)) {
warning("Only one version found per PKC module. ",
"No PKCs need to be combined. ",
"Therefore, no default PKC versions will be used.")
}
# Check for multiple versions of pkc
multi_idx <- duplicated(header[["PKCModule"]])
multi_mods <- unique(header[["PKCModule"]][multi_idx])
if (length(multi_mods) < 1) {
if (!is.null(default_pkc_vers)) {
warning("Only one version found per PKC module. ",
"No PKCs need to be combined. ",
"Therefore, no default PKC versions will be used.")
}
} else {
use_pkc_names <- lapply(multi_mods, function(mod) {
mod_idx <- header[["PKCModule"]] == mod
max_vers <- as.numeric(as.character(max(as.numeric_version(
header[["PKCFileVersion"]][mod_idx]))))
max_name <- names(header[["PKCFileVersion"]][
header[["PKCFileVersion"]] == max_vers])
return(max_name)
})
names(use_pkc_names) <- multi_mods
if (!is.null(default_pkc_vers)) {
default_names <- extract_pkc_names(default_pkc_vers)
default_mods <- extract_pkc_modules(default_pkc_vers)
dup_defaults <- default_names[duplicated(default_mods) |
duplicated(default_mods, fromLast=TRUE)]
if (!all(default_names %in% names(header[["PKCFileName"]]))) {
removed_pkcs <-
default_pkc_vers[!default_names %in% names(header[["PKCFileName"]])]
stop("Could not match all default PKC versions with a PKC file name. ",
"Check default file names match exactly to a PKC file name.\n",
paste0("Unmatched default PKC versions: ", removed_pkcs))
} else if (length(dup_defaults) > 0) {
stop("There should only be one default PKC version per module. ",
"Ensure only one version per module in default PKCs list.\n",
"Multiple default PKC version conflicts: ",
paste(dup_defaults, collapse=", "))
} else {
use_pkc_names[default_mods] <- default_names
}
}
}
length(multi_mods)
length(multi_mods) < 1
use_pkc_names <- lapply(multi_mods, function(mod) {
mod_idx <- header[["PKCModule"]] == mod
max_vers <- as.numeric(as.character(max(as.numeric_version(
header[["PKCFileVersion"]][mod_idx]))))
max_name <- names(header[["PKCFileVersion"]][
header[["PKCFileVersion"]] == max_vers])
return(max_name)
})
mod
multi_mods
mod <- multi_mods
mod_idx <- header[["PKCModule"]] == mod
max_vers <- as.numeric(as.character(max(as.numeric_version(
header[["PKCFileVersion"]][mod_idx]))))
header[["PKCFileVersion"]][mod_idx]
as.numeric_version(
header[["PKCFileVersion"]][mod_idx]))
as.numeric_version(
header[["PKCFileVersion"]][mod_idx])
header[["PKCFileVersion"]][mod_idx]
as.numeric_version(
header[["PKCFileVersion"]][mod_idx])
??as.numeric_version
as.numeric(as.character(max(as.numeric_version(
header[["PKCFileVersion"]][mod_idx], strict = FALSE))))
as.numeric_version(3)
as.numeric_version(3.0)
as.numeric_version(3.0.0)
as.numeric_version("3.0.0")
as.numeric_version("3")
as.numeric_version("3.0")
header[["PKCFileVersion"]][mod_idx]
class(header[["PKCFileVersion"]][mod_idx])
as.numeric(max(as.numeric_version(as.character(
header[["PKCFileVersion"]][mod_idx]))))
as.character(
header[["PKCFileVersion"]][mod_idx])
as.numeric_version(as.character(
header[["PKCFileVersion"]][mod_idx]))
max(as.numeric_version(as.character(
header[["PKCFileVersion"]][mod_idx])))
as.numeric(max(as.numeric_version(as.character(
header[["PKCFileVersion"]][mod_idx]))))
class(max(as.numeric_version(as.character(
header[["PKCFileVersion"]][mod_idx]))))
max_vers <- max(as.numeric_version(as.character(
header[["PKCFileVersion"]][mod_idx])))
max_name <- names(header[["PKCFileVersion"]][
header[["PKCFileVersion"]] == max_vers])
max_name
max_vers
max_vers <- as.character(max(as.numeric_version(as.character(
header[["PKCFileVersion"]][mod_idx]))))
max_vers
max_name <- names(header[["PKCFileVersion"]][
header[["PKCFileVersion"]] == max_vers])
max_name
header[["PKCFileVersion"]]
max_vers <- as.numeric(as.character(max(as.numeric_version(as.character(
header[["PKCFileVersion"]][mod_idx])))))
max_name <- names(header[["PKCFileVersion"]][
header[["PKCFileVersion"]] == max_vers])
max_name
source("~/GeomxTools/R/readPKCFile.R")
# req7: check for warning when resolving multiple PKC versions:------
testthat::test_that("check for warning when resolving multiple PKC versions", {
expect_warning(expect_warning(readPKCFile(file = multiPKCFiles),
"The following probes"), "The following PKC")
})
readPKCFile(file = multiPKCFiles)
expect_warning(readPKCFile(file = multiPKCFiles),
"The following probes")
expect_warning(expect_warning(readPKCFile(file = multiPKCFiles),
"The following probes"), "The following PKC")
expect_warning(readPKCFile(file = multiPKCFiles),
c("The following probes", "The following PKC"))
expect_warning(readPKCFile(multiPKCFiles), "The following probes")
# req7: check for warning when resolving multiple PKC versions:------
testthat::test_that("check for warning when resolving multiple PKC versions", {
expect_warning(readPKCFile(multiPKCFiles), "The following probes")
})
firstVer <- readPKCFile(multiPKCFiles[1L])
secondVer <- readPKCFile(multiPKCFiles[2L])
combineVer <- suppressWarnings(readPKCFile(multiPKCFiles))
combineReVer <- suppressWarnings(readPKCFile(multiPKCFiles,
default_pkc_vers=multiPKCFiles[1L]))
newProbesV1 <- setdiff(firstVer$RTS_ID, secondVer$RTS_ID)
newProbesV2 <- setdiff(secondVer$RTS_ID, firstVer$RTS_ID)
reassignedProbe <- which(combineVer$Target != combineReVer$Target)
# req8: check that only probes in all versions kept:------
testthat::test_that("check module probes in all PKC versions", {
expect_equal(nrow(combineVer) * 2, (nrow(firstVer) + nrow(secondVer) -
length(newProbesV1) - length(newProbesV2)))
expect_true(sum(c(newProbesV1, newProbesV2) %in% combineVer$RTS_ID) == 0)
expect_equal(nrow(combineVer), nrow(combineReVer))
})
# req9: Default PKC target assignments are used for probes with most recent PKC
#           being default unless re-specified by user:----
testthat::test_that("check module probes in all PKC versions", {
expect_false(all(combineVer$Target == combineReVer$Target))
expect_true(combineVer$RTS_ID[reassignedProbe] ==
combineReVer$RTS_ID[reassignedProbe])
expect_true(combineVer$Target[reassignedProbe] ==
secondVer[combineVer$RTS_ID[reassignedProbe] == secondVer$RTS_ID, "Target"])
expect_true(combineReVer$Target[reassignedProbe] ==
firstVer[combineReVer$RTS_ID[reassignedProbe] == firstVer$RTS_ID, "Target"])
expect_false(combineReVer$Module[reassignedProbe] %in% combineVer$Module)
expect_false(combineVer$Module[reassignedProbe] %in% combineReVer$Module)
})
install.packages("devtools")
devtools::document()
devtools::document("GeomxTools/")
remove.packages("GeomxTools")
devtools::document("GeomxTools/")
setwd("GeomxTools/")
devtools::test()
source("~/GeomxTools/tests/testthat/test_readPKC.R")
# req7: check for warning when resolving multiple PKC versions:------
testthat::test_that("check for warning when resolving multiple PKC versions", {
expect_warning(expect_warning(readPKCFile(multiPKCFiles),
"The following probes"), "The following PKC")
})
source("~/GeomxTools/tests/testthat/test_readPKC.R")
